---
interface Props {
    title: string;
    description: string;
}

const { title, description } = Astro.props;

import { ViewTransitions } from 'astro:transitions';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
---
<!doctype html>
<html lang="es">
<head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/cv-img.webp" />
    <meta name="theme-color" content="#22333B" />
    <meta name="robots" content="index, follow" />
    <meta name="generator" content={Astro.generator} />

    <meta property="og:title" content="Leandro Rossi Frontend Developer">
    <meta property="og:description" content="Leandro Rossi Frontend Developer - Portfolio">
    <meta property="og:image" content="/cv-img.webp">
    <meta property="og:image:alt" content="Imagen perfil Leandro Rossi Frontend Developer">

    <title>{title}</title>
    <ViewTransitions />
</head>
<body class="font-mono p-4 flex flex-col items-center w-full transition-colors duration-300 relative">
    <!-- Estrellas para Modo Oscuro -->
    <div class="star-background dark:block hidden fixed inset-0 z-0 pointer-events-none">
        <div class="space space-1"></div>
        <div class="space space-2"></div>
        <div class="space space-3"></div>
    </div>
    
    <!-- Nubes para Modo Claro -->
    <div class="cloud-background dark:hidden block fixed inset-0 z-0 pointer-events-none">
        <div class="cloud"></div>
        <div class="cloud"></div>
        <div class="cloud"></div>
        <div class="cloud"></div>
        <div class="cloud"></div>
        <div class="cloud"></div>
        <div class="cloud"></div>
        <div class="cloud"></div>
        <div class="cloud"></div>
        <div class="cloud"></div>
    </div>

    <Header/>
    <slot />
    <Footer/>
</body>
</html>

<style is:global>
    .dark body {        
        background-image: linear-gradient(#051327, #000);
    }
    body {
        background-image: linear-gradient(to top, #2980B9, #6DD5FA, #dae5fa);
    }
    html {        
        scroll-behavior: smooth;
    } 
    @media (prefers-reduced-motion: reduce) {
        html {
          scroll-behavior: auto;
        }
    }

    .scrollbar-style::-webkit-scrollbar {width: 8px;}
  
    .scrollbar-style::-webkit-scrollbar-track {
      background: #424242;
      border-radius: 10px;
    }
  
    .scrollbar-style::-webkit-scrollbar-thumb {
      background-color: #686868;
      border-radius: 20px;
    }
  
    .scrollbar-style::-webkit-scrollbar-thumb:hover {
      background: #868686;
    }

    /* Fondo de estrellas en modo oscuro */
    .star-background {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        pointer-events: none; 
        z-index: -1;
    }

    .space {
        width: var(--size);
        height: var(--size);
        background: #fff;
        border-radius: 100%;
        box-shadow: var(--space-layer);
        position: absolute;
        top: 0;
        left: 0;
        opacity: 0.75; 
        animation: moveStars var(--duration) linear infinite;
    }

    @keyframes moveStars {
        from {transform: translateY(0)}
        to {transform: translateY(-15vh)}
    }

    /* Fondo de nubes en modo claro */
    .cloud-background {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        pointer-events: none; 
        z-index: -1;
        overflow: hidden;
    }

    .cloud {   
        background-image: url("/Cloud.webp");     
        background-size:100% 100%;
        position: absolute;         
    }
    .cloud:nth-child(1){
        margin-top: 5vh;
        width: 200px; 
        height: 120px; 
        animation: moveCloud1 35s linear infinite;
        opacity: 1; 
    }
    .cloud:nth-child(2){
        margin-top: 15vh;
        width: 180px; 
        height: 80px; 
        animation: moveCloud1 40s linear infinite;
        opacity: 0.8; 
    }
    .cloud:nth-child(3){
        margin-top: 20vh;
        width: 350px; 
        height: 180px; 
        animation: moveCloud2 45s linear infinite;
        opacity: 0.7; 
    }
    .cloud:nth-child(4){
        margin-top: 25vh;
        width: 300px; 
        height: 160px; 
        animation: moveCloud1 30s linear infinite;
        opacity: 0.6; 
    }
    .cloud:nth-child(5){
        margin-top: 60vh;
        width: 180px; 
        height: 70px;
        animation: moveCloud2 40s linear infinite;
        opacity: 0.7; 
    }
    .cloud:nth-child(6){
        margin-top: 70vh;
        width: 350px; 
        height: 180px; 
        animation: moveCloud1 45s linear infinite;
        opacity: 0.8; 
    }
    .cloud:nth-child(7){
        margin-top: 65vh;
        width: 200px; 
        height: 120px;
        animation: moveCloud1 40s linear infinite;
        opacity: 1; 
    }
    .cloud:nth-child(8){
        margin-top: 75vh;
        width: 300px; 
        height: 160px; 
        animation: moveCloud2 35s linear infinite;
        opacity: 0.6; 
    }
    .cloud:nth-child(9){
        margin-top: 40vh;
        width: 300px; 
        height: 160px; 
        animation: moveCloud1 35s linear infinite;
        opacity: 0.7; 
    }
    .cloud:nth-child(10){
        margin-top: 50vh;
        width: 200px; 
        height: 120px;  
        animation: moveCloud1 45s linear infinite;
        opacity: 0.8; 
    }

    @keyframes moveCloud1 {
        from { margin-left: 100%; }
        to { margin-left: -30%; }
    }
    @keyframes moveCloud2 {
        from { margin-left: -30%; }
        to { margin-left: 100%; }
    }
</style>

<script>
    const COLORS = ["#fff2", "#fff4", "#fff7", "#fffc"];
    
    // Generar estrellas en modo oscuro
    const generateSpaceLayer = (size, selector, totalStars, duration) => {
        const layer = [];
        for (let i = 0; i < totalStars; i++) { 
            const color = COLORS[Math.floor(Math.random() * COLORS.length)];
            const x = Math.floor(Math.random() * 100);
            const y = Math.floor(Math.random() * 100);
            layer.push(`${x}vw ${y}vh 0 ${color}, ${x}vw ${y}vh 0 ${color}`);
        }
        const container = document.querySelector(selector);
        container.style.setProperty("--space-layer", layer.join(","));
        container.style.setProperty("--size", size);
        container.style.setProperty("--duration", duration);
    };
    generateSpaceLayer("1px", ".space-1", 200, "25s");
    generateSpaceLayer("2px", ".space-2", 100, "20s");
    generateSpaceLayer("4px", ".space-3", 25, "15s");
       
    
    if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
        document.documentElement.classList.add('dark');
    } else {
        document.documentElement.classList.remove('dark');
    }
    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', event => {
        if (event.matches) {
        document.documentElement.classList.add('dark');
        } else {
        document.documentElement.classList.remove('dark');
        }
    });
</script>